name: SonarCloud analysis

on:
  push:
  workflow_dispatch:
  
jobs:
  SAST:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            -Dsonar.projectKey=labfinaldevsecops_laboratorio-final
            -Dsonar.organization=labfinaldevsecops-1
            
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .

  SCA:
      needs: SAST
      runs-on: ubuntu-24.04
      steps:
        
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Dependency Check
          uses: dependency-check/Dependency-Check_Action@main
          env:
            JAVA_HOME: /opt/jdk
          id: Depcheck
          with: 
            project: '${{ github.event.repository.name }}'
            path: '.'
            format: 'HTML'
            #se ajusto a 5 el valor de failonCVSS para que falle cuando existen vulneraviliodaddes de dependencias medias, altas y criticas
            #args: >
             # --out ./reports
             # --failOnCVSS 5 
             # --enableRetired
              
        - name: Upload Test Result
          uses: actions/upload-artifact@master
          with: 
            name: Depcheck Report
            path: ./reports

  DockerBuild:
    needs: SCA
    runs-on: ubuntu-24.04
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login 
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Build 
      run: |
        docker build --tag nachoandres/labfinaldevsecops-test:latest .

    - name: Push Docker 
      run: |
        docker push nachoandres/labfinaldevsecops-test:latest

  DockerScan:
    needs: DockerBuild 
    runs-on: ubuntu-24.04
    steps:

    - name: Docker Login 
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull Docker 
      run: |
        docker pull nachoandres/labfinaldevsecops-test:latest 

   # - name: Run Trivy Scan 
   #   uses: aquasecurity/trivy-action@master
    #  with:
    #    image-ref: 'nachoandres/labfinaldevsecops-test:latest'
    #    format: 'table'
    - name: Check out Git repository
      uses: actions/checkout@v4

    # The first call to the action will invoke setup-trivy and install trivy
    - name: Generate Trivy Vulnerability Report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "fs"
        output: trivy-report.json
        format: json
        scan-ref: .
        exit-code: 0

    - name: Upload Vulnerability Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.json
        retention-days: 30
        
    - name: Fail build on Medium/High/Criticial Vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'nachoandres/labfinaldevsecops-test:latest'
        scan-type: "fs"
        format: 'table'
        scan-ref: .
        severity: MEDIUM,HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1
        # On a subsequent call to the action we know trivy is already installed so can skip this
        skip-setup-trivy: true



