name: SonarCloud analysis

on:
  push:
  workflow_dispatch:
  
jobs:
  SAST:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            -Dsonar.projectKey=labfinaldevsecops_laboratorio-final
            -Dsonar.organization=labfinaldevsecops-1
            
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .

  SCA:
      needs: SAST
      runs-on: ubuntu-24.04
      steps:
        
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Dependency Check
          uses: dependency-check/Dependency-Check_Action@1.1.0
          env:
            JAVA_HOME: /opt/jdk
          id: Depcheck
          with: 
            project: '${{ github.event.repository.name }}'
            path: '.'
            format: 'ALL'
            args: >
              --out ./reports
              --failOnCVSS 5
              --enableRetired

        - name: List Generated Files
          run: ls -R './dependency-check-reports'

        - name: Check for Vulnerabilities
          run: |
            # Busca el archivo JSON generado por Dependency Check
            if [ -f dependency-check-report.json ]; then
              CRITICAL=$(jq '[.dependencies[].vulnerabilities[] | select(.severity == "CRITICAL")] | length' dependency-check-report.json)
              HIGH=$(jq '[.dependencies[].vulnerabilities[] | select(.severity == "HIGH")] | length' dependency-check-report.json)
              MEDIUM=$(jq '[.dependencies[].vulnerabilities[] | select(.severity == "MEDIUM")] | length' dependency-check-report.json)

              echo "Critical vulnerabilities: $CRITICAL"
              echo "High vulnerabilities: $HIGH"
              echo "Medium vulnerabilities: $MEDIUM"

              if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] || [ "$MEDIUM" -gt 0 ]; then
                echo "Failing build due to vulnerabilities!"
                exit 1
              fi
            else
              echo "dependency-check-report.json not found!"
              exit 1
            fi      
              
        - name: Upload Test Result
          uses: actions/upload-artifact@master
          with: 
            name: Depcheck Report
            path: ./reports